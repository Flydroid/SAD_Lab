#include <Arduino.h>
#include <SPI.h>

#define SPI_SPEED 500000

const int CS_PIN = 10; //Pin 10 is C
volatile bool F_Time =false;
unsigned int f = 0;

float phase = 0.0;
float twopi = 3.14159 * 2;
int step =0;

int count[20]={204,410,614,819,1024,1229,1434,1638,1843,2048,2253,2458,2662,2867,3072,3277,3482,3686,3891,4095};
int i=0;

uint16_t signal[269]={2324,2284,2212,2104,1964,1792,1600,1396,1180,960,752,556,380,
240,152,100,60,36,64,136,252,404,588,792,1004,1224,1448,
1652,1840,2004,2140,2236,2308,2332,2312,2256,2164,2044,1884,1712,1504,
1296,1080,860,656,472,304,196,124,80,40,40,92,188,320,
492,688,892,1108,1332,1544,1744,1920,2068,2192,2280,2324,2324,2288,
2220,2108,1972,1804,1612,1408,1192,976,764,564,388,244,156,100,
60,36,60,132,248,400,580,780,996,1216,1436,1644,1832,1996,
2132,2236,2304,2328,2312,2260,2168,2048,1892,1712,1512,1304,1088,868,
664,476,312,196,128,80,44,40,88,188,316,480,676,880,
1100,1316,1536,1732,1912,2064,2188,2276,2320,2324,2292,2220,2116,1980,
1812,1620,1416,1204,984,768,572,396,252,160,104,60,36,60,
128,240,388,568,772,984,1204,1424,1632,1820,1984,2124,2232,2300,
2328,2316,2260,2176,2056,1900,1724,1524,1316,1100,880,676,488,320,
204,128,84,44,40,88,180,308,476,664,876,1088,1308,1524,
1724,1900,2052,2180,2268,2320,2328,2292,2228,2124,1988,1820,1632,1428,
1212,996,784,588,404,256,164,108,64,28,56,124,236,384,
560,760,972,1192,1412,1620,1812,1976,2116,2224,2300,2328,2316,2268,
2180,2064,1912,1732,1536,1324,1112,892,684,496,328,208,136,88,
48,40,84,172,300,464,656,860,1076,1300,1516,1716,1892,2044,
2168,2264,2316,2324};


uint16_t sine[256]= {
0x800,0x832,0x864,0x896,0x8c8,0x8fa,0x92c,0x95e,
0x98f,0x9c0,0x9f1,0xa22,0xa52,0xa82,0xab1,0xae0,
0xb0f,0xb3d,0xb6b,0xb98,0xbc5,0xbf1,0xc1c,0xc47,
0xc71,0xc9a,0xcc3,0xceb,0xd12,0xd39,0xd5f,0xd83,
0xda7,0xdca,0xded,0xe0e,0xe2e,0xe4e,0xe6c,0xe8a,
0xea6,0xec1,0xedc,0xef5,0xf0d,0xf24,0xf3a,0xf4f,
0xf63,0xf76,0xf87,0xf98,0xfa7,0xfb5,0xfc2,0xfcd,
0xfd8,0xfe1,0xfe9,0xff0,0xff5,0xff9,0xffd,0xffe,
0xfff,0xffe,0xffd,0xff9,0xff5,0xff0,0xfe9,0xfe1,
0xfd8,0xfcd,0xfc2,0xfb5,0xfa7,0xf98,0xf87,0xf76,
0xf63,0xf4f,0xf3a,0xf24,0xf0d,0xef5,0xedc,0xec1,
0xea6,0xe8a,0xe6c,0xe4e,0xe2e,0xe0e,0xded,0xdca,
0xda7,0xd83,0xd5f,0xd39,0xd12,0xceb,0xcc3,0xc9a,
0xc71,0xc47,0xc1c,0xbf1,0xbc5,0xb98,0xb6b,0xb3d,
0xb0f,0xae0,0xab1,0xa82,0xa52,0xa22,0x9f1,0x9c0,
0x98f,0x95e,0x92c,0x8fa,0x8c8,0x896,0x864,0x832,
0x800,0x7cd,0x79b,0x769,0x737,0x705,0x6d3,0x6a1,
0x670,0x63f,0x60e,0x5dd,0x5ad,0x57d,0x54e,0x51f,
0x4f0,0x4c2,0x494,0x467,0x43a,0x40e,0x3e3,0x3b8,
0x38e,0x365,0x33c,0x314,0x2ed,0x2c6,0x2a0,0x27c,
0x258,0x235,0x212,0x1f1,0x1d1,0x1b1,0x193,0x175,
0x159,0x13e,0x123,0x10a,0xf2,0xdb,0xc5,0xb0,
0x9c,0x89,0x78,0x67,0x58,0x4a,0x3d,0x32,
0x27,0x1e,0x16,0xf,0xa,0x6,0x2,0x1,
0x0,0x1,0x2,0x6,0xa,0xf,0x16,0x1e,
0x27,0x32,0x3d,0x4a,0x58,0x67,0x78,0x89,
0x9c,0xb0,0xc5,0xdb,0xf2,0x10a,0x123,0x13e,
0x159,0x175,0x193,0x1b1,0x1d1,0x1f1,0x212,0x235,
0x258,0x27c,0x2a0,0x2c6,0x2ed,0x314,0x33c,0x365,
0x38e,0x3b8,0x3e3,0x40e,0x43a,0x467,0x494,0x4c2,
0x4f0,0x51f,0x54e,0x57d,0x5ad,0x5dd,0x60e,0x63f,
0x670,0x6a1,0x6d3,0x705,0x737,0x769,0x79b,0x7cd};


uint16_t tri[256]={0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x100,
0x120,0x140,0x160,0x180,0x1a0,0x1c0,0x1e0,0x200,
0x220,0x240,0x260,0x280,0x2a0,0x2c0,0x2e0,0x300,
0x320,0x340,0x360,0x380,0x3a0,0x3c0,0x3e0,0x400,
0x420,0x440,0x460,0x480,0x4a0,0x4c0,0x4e0,0x500,
0x520,0x540,0x560,0x580,0x5a0,0x5c0,0x5e0,0x600,
0x620,0x640,0x660,0x680,0x6a0,0x6c0,0x6e0,0x700,
0x720,0x740,0x760,0x780,0x7a0,0x7c0,0x7e0,0x800,
0x81f,0x83f,0x85f,0x87f,0x89f,0x8bf,0x8df,0x8ff,
0x91f,0x93f,0x95f,0x97f,0x99f,0x9bf,0x9df,0x9ff,
0xa1f,0xa3f,0xa5f,0xa7f,0xa9f,0xabf,0xadf,0xaff,
0xb1f,0xb3f,0xb5f,0xb7f,0xb9f,0xbbf,0xbdf,0xbff,
0xc1f,0xc3f,0xc5f,0xc7f,0xc9f,0xcbf,0xcdf,0xcff,
0xd1f,0xd3f,0xd5f,0xd7f,0xd9f,0xdbf,0xddf,0xdff,
0xe1f,0xe3f,0xe5f,0xe7f,0xe9f,0xebf,0xedf,0xeff,
0xf1f,0xf3f,0xf5f,0xf7f,0xf9f,0xfbf,0xfdf,0xfff,
0xfdf,0xfbf,0xf9f,0xf7f,0xf5f,0xf3f,0xf1f,0xeff,
0xedf,0xebf,0xe9f,0xe7f,0xe5f,0xe3f,0xe1f,0xdff,
0xddf,0xdbf,0xd9f,0xd7f,0xd5f,0xd3f,0xd1f,0xcff,
0xcdf,0xcbf,0xc9f,0xc7f,0xc5f,0xc3f,0xc1f,0xbff,
0xbdf,0xbbf,0xb9f,0xb7f,0xb5f,0xb3f,0xb1f,0xaff,
0xadf,0xabf,0xa9f,0xa7f,0xa5f,0xa3f,0xa1f,0x9ff,
0x9df,0x9bf,0x99f,0x97f,0x95f,0x93f,0x91f,0x8ff,
0x8df,0x8bf,0x89f,0x87f,0x85f,0x83f,0x81f,0x800,
0x7e0,0x7c0,0x7a0,0x780,0x760,0x740,0x720,0x700,
0x6e0,0x6c0,0x6a0,0x680,0x660,0x640,0x620,0x600,
0x5e0,0x5c0,0x5a0,0x580,0x560,0x540,0x520,0x500,
0x4e0,0x4c0,0x4a0,0x480,0x460,0x440,0x420,0x400,
0x3e0,0x3c0,0x3a0,0x380,0x360,0x340,0x320,0x300,
0x2e0,0x2c0,0x2a0,0x280,0x260,0x240,0x220,0x200,
0x1e0,0x1c0,0x1a0,0x180,0x160,0x140,0x120,0x100,
0xe0,0xc0,0xa0,0x80,0x60,0x40,0x20,0x0};








uint16_t saw[256] = {0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x100,
0x120,0x140,0x160,0x180,0x1a0,0x1c0,0x1e0,0x200,
0x220,0x240,0x260,0x280,0x2a0,0x2c0,0x2e0,0x300,
0x320,0x340,0x360,0x380,0x3a0,0x3c0,0x3e0,0x400,
0x420,0x440,0x460,0x480,0x4a0,0x4c0,0x4e0,0x500,
0x520,0x540,0x560,0x580,0x5a0,0x5c0,0x5e0,0x600,
0x620,0x640,0x660,0x680,0x6a0,0x6c0,0x6e0,0x700,
0x720,0x740,0x760,0x780,0x7a0,0x7c0,0x7e0,0x800,
0x81f,0x83f,0x85f,0x87f,0x89f,0x8bf,0x8df,0x8ff,
0x91f,0x93f,0x95f,0x97f,0x99f,0x9bf,0x9df,0x9ff,
0xa1f,0xa3f,0xa5f,0xa7f,0xa9f,0xabf,0xadf,0xaff,
0xb1f,0xb3f,0xb5f,0xb7f,0xb9f,0xbbf,0xbdf,0xbff,
0xc1f,0xc3f,0xc5f,0xc7f,0xc9f,0xcbf,0xcdf,0xcff,
0xd1f,0xd3f,0xd5f,0xd7f,0xd9f,0xdbf,0xddf,0xdff,
0xe1f,0xe3f,0xe5f,0xe7f,0xe9f,0xebf,0xedf,0xeff,
0xf1f,0xf3f,0xf5f,0xf7f,0xf9f,0xfbf,0xfdf,0xfff,
0x20,0x40,0x60,0x80,0xa0,0xc0,0xe0,0x100,
0x120,0x140,0x160,0x180,0x1a0,0x1c0,0x1e0,0x200,
0x220,0x240,0x260,0x280,0x2a0,0x2c0,0x2e0,0x300,
0x320,0x340,0x360,0x380,0x3a0,0x3c0,0x3e0,0x400,
0x420,0x440,0x460,0x480,0x4a0,0x4c0,0x4e0,0x500,
0x520,0x540,0x560,0x580,0x5a0,0x5c0,0x5e0,0x600,
0x620,0x640,0x660,0x680,0x6a0,0x6c0,0x6e0,0x700,
0x720,0x740,0x760,0x780,0x7a0,0x7c0,0x7e0,0x800,
0x81f,0x83f,0x85f,0x87f,0x89f,0x8bf,0x8df,0x8ff,
0x91f,0x93f,0x95f,0x97f,0x99f,0x9bf,0x9df,0x9ff,
0xa1f,0xa3f,0xa5f,0xa7f,0xa9f,0xabf,0xadf,0xaff,
0xb1f,0xb3f,0xb5f,0xb7f,0xb9f,0xbbf,0xbdf,0xbff,
0xc1f,0xc3f,0xc5f,0xc7f,0xc9f,0xcbf,0xcdf,0xcff,
0xd1f,0xd3f,0xd5f,0xd7f,0xd9f,0xdbf,0xddf,0xdff,
0xe1f,0xe3f,0xe5f,0xe7f,0xe9f,0xebf,0xedf,0xeff,
0xf1f,0xf3f,0xf5f,0xf7f,0xf9f,0xfbf,0xfdf,0xfff};

IntervalTimer F_Timer;

void f_timer(){
    F_Time = true;
}

void setOutput(unsigned int val);

void setup() {
     Serial.begin(9600);
     F_Timer.begin(f_timer,300);
     pinMode(CS_PIN, OUTPUT);
     SPI.begin();
}

void loop() {
    if(Serial.available() >0){
        f=Serial.parseInt();
        if(f >0){
        Serial.println(f);
        float count = (1/f)/256*1000000;
        Serial.println(count);
        F_Timer.update(count);
    
        /*
        Serial.println(count[i]);
        setOutput(count[i]);
        i++;   
        if(i==20){i = 0;};
        */
        }

    }

    if(F_Time){
        setOutput(signal[step]);
        //Serial.println(signal[step]);
        step++;
        if (step >= 269) step =0 ;
        noInterrupts();
        F_Time = false;
        interrupts();
    }
    
}


void setOutput(unsigned int val)
{
    byte lowByte = val & 0xff;
    byte highByte = ((val >> 8) & 0xff) | 0x10;

    SPI.beginTransaction(SPISettings(SPI_SPEED,MSBFIRST,SPI_MODE0));
    digitalWriteFast(CS_PIN,LOW);
  //  Serial.println("CS_LOW");
    SPI.transfer(highByte);
    SPI.transfer(lowByte);
    digitalWriteFast(CS_PIN,HIGH);
    SPI.endTransaction();
   // Serial.println("SPI_END");
}
 


